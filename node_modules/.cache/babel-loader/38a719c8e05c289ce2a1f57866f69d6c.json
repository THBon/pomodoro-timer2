{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\THBon\\\\Desktop\\\\coding\\\\projects\\\\Project-_Pomodoro_Timer-_Qualified-Thai_Huynh-Solution\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport Session from \"./Session\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); //The length of focus (default 25)\n\n  const [focusDuration, setFocusDuration] = useState(25); //The length of break (default 5)\n\n  const [breakDuration, setBreakDuration] = useState(5); //Deactivate timer button, if true button will deactivate\n\n  const [deactivateButton, setDeactivateButton] = useState(false); //The state of the stop button\n\n  const [deactivateStop, setDeactivateStop] = useState(true);\n\n  const increaseFocus = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const decreaseFocus = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n\n  const increaseBreak = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  const decreaseBreak = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function stopHandler() {\n    setIsTimerRunning(false);\n    setSession(null);\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setDeactivateButton(false);\n    setDeactivateStop(true);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    increaseFocus: increaseFocus,\n    decreaseFocus: decreaseFocus,\n    focusDuration: focusDuration,\n    deactivateButton: deactivateButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    increaseBreak: increaseBreak,\n    decreaseBreak: decreaseBreak,\n    breakDuration: breakDuration,\n    deactivateButton: deactivateButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PlayPause, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopHandler: stopHandler,\n    deactivateStop: deactivateStop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Session, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/THBon/Desktop/coding/projects/Project-_Pomodoro_Timer-_Qualified-Thai_Huynh-Solution/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Focus","Break","PlayPause","Session","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","deactivateButton","setDeactivateButton","deactivateStop","setDeactivateStop","increaseFocus","min","decreaseFocus","increaseBreak","decreaseBreak","Audio","play","playPause","nextState","prevStateSession","stopHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Focus from \"./Focus\";\nimport Break from \"./Break\";\nimport PlayPause from \"./PlayPause\";\nimport Session from \"./Session\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  //The length of focus (default 25)\n  const [focusDuration, setFocusDuration] = useState(25);\n  //The length of break (default 5)\n  const [breakDuration, setBreakDuration] = useState(5);\n  //Deactivate timer button, if true button will deactivate\n  const [deactivateButton, setDeactivateButton] = useState(false);\n  //The state of the stop button\n  const [deactivateStop, setDeactivateStop] = useState(true);\n\n  const increaseFocus = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  }\n\n  const decreaseFocus = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  }\n\n  const increaseBreak = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  }\n\n  const decreaseBreak = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  }\n\n\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function stopHandler() {\n    setIsTimerRunning(false);\n    setSession(null);\n    setFocusDuration(25);\n    setBreakDuration(5);\n    setDeactivateButton(false);\n    setDeactivateStop(true);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus increaseFocus={increaseFocus} decreaseFocus={decreaseFocus} focusDuration={focusDuration} deactivateButton={deactivateButton} />\n        <Break increaseBreak={increaseBreak} decreaseBreak={decreaseBreak} breakDuration={breakDuration} deactivateButton={deactivateButton} />\n      </div>\n      <div className=\"row\">\n        <PlayPause playPause={playPause} isTimerRunning={isTimerRunning} stopHandler={stopHandler} deactivateStop={deactivateStop} />\n      </div>\n      <Session />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}